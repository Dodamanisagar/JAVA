package Serialization_7.SerializationWithRespectToInheritance;

public class About {
/**
 * CASE 1:-
 --->Even though child class doesn't implement serialization we can serialize child class object,
     if parent class implement serializable interface.
 --->That is Serializable nature is inheriting from parent to child.
 --->Hence if parent is Serializable then by default every child is serializable.

 NOTE:-
 --->Object class doesn't implement Serializable interface

 *CASE 2:-
 --->Even though parent class doesn't implement Serializable we can Serialize child class object.
 --->Only if child class implements Serializable interface.
 --->That is to serialize child class object parent class need not be serializable.

 --->At the time of Serialization JVM will check whether any variable is inheriting from non-Serializable parent class or not.
 --->If any variable is inheriting from non-Serializable parent class then JVM ignores original values and save default value to the file.

 --->At the time of de-Serialization JVM will check whether any non-Serializable parent class is there or not.
 --->If any parent class is non-serializable then JVM will execute instance control flow in every non-Serializable parent and
     share its instance variable to the current Object.

 --->While executing instance control flow of non-Serializable parent JVM will always call no-argument constructor.
 --->Hence every non-Serializable class should compulsory contain no-argument constructor.
 --->It may be default constructor generated by compiler or customized constructor explicitly provided by programmer.
 --->Other wise we will get runtime exception saying 'InvalidClassException'.
 */
}
